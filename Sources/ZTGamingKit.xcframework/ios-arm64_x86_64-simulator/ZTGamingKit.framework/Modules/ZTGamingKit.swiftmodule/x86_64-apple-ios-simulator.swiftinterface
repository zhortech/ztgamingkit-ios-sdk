// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZTGamingKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import Swift
import ZTCoreKit
import _Concurrency
import _StringProcessing
extension ZTGamingKit.ZTRealtimeMessage {
  public struct Acknowledgment : Swift.CustomStringConvertible {
    public var command: ZTCoreKit.ZTAlgoCommand? {
      get
    }
    public var status: ZTCoreKit.ZTAlgoAcknowledgmentStatus? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(data: Foundation.Data)
  }
}
public struct ZTRealtimeMessage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public enum Side : Swift.UInt8 {
    case left
    case right
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var senderSide: ZTGamingKit.ZTRealtimeMessage.Side? {
    get
  }
  public var concernedSide: ZTGamingKit.ZTRealtimeMessage.Side? {
    get
  }
  public var eventType: ZTGamingKit.ZTRealtimeMessageEventType? {
    get
  }
  public var content: [Swift.UInt8] {
    get
  }
  public init(bytes: [Swift.UInt8])
  public var status: ZTGamingKit.ZTRealtimeMessage.Status? {
    get
  }
  public var acknowledgment: ZTGamingKit.ZTRealtimeMessage.Acknowledgment? {
    get
  }
  public var realtimeEvent: ZTGamingKit.ZTRealtimeMessage.Event? {
    get
  }
  public var realtimeMetrics: ZTGamingKit.ZTRealtimeMessage.Metrics? {
    get
  }
}
extension ZTGamingKit.ZTRealtimeMessage {
  public struct Status : Swift.CustomStringConvertible {
    public var code: ZTCoreKit.ZTAlgoStatus? {
      get
    }
    public var timestamp: Swift.UInt32? {
      get
    }
    public var algoMode: ZTCoreKit.ZTAlgoMode? {
      get
    }
    public var precisionMode: ZTCoreKit.ZTAlgoPrecisionMode? {
      get
    }
    public var consecutiveSteps: Swift.UInt8? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(data: Foundation.Data)
  }
}
@_inheritsConvenienceInitializers final public class ZTGamingActivitySummary : ZTCoreKit.ZTActivitySummary {
  final public var data: [Swift.String : Any]?
  final public var attributes: [Swift.String : Any]?
  required public init?(map: ZTCoreKit.ZTMap)
  override final public func mapping(map: ZTCoreKit.ZTMap)
  @objc deinit
}
final public class ZTUserDataParameters : Swift.Codable {
  final public var bodyWeight: Swift.Int?
  final public var bodyHeight: Swift.Int?
  final public var shoeSize: Swift.Int?
  final public var threadmillSpeed: Swift.Int?
  public init(bodyWeight: Swift.Int?, bodyHeight: Swift.Int?, shoeSize: Swift.Int?, threadmillSpeed: Swift.Int? = nil)
  public enum Parameters : Swift.UInt8 {
    case bodyWeight
    case bodyHeight
    case shoeSize
    case threadmillSpeed
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ZTGamingDfuDelegate {
  func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  func dfuDelegate(didFinish: Swift.Bool)
  func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  func dfuDelegate(progress: Swift.Float?)
  func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTGamingKit.ZTGaming : ZTCoreKit.ZTDfuDelegate {
  public func updateFirmware(completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func updateFirmware(path: Swift.String, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  public func dfuDelegate(firmwareDownloaded: Swift.Bool, version: Swift.String?)
  public func dfuDelegate(didFinish: Swift.Bool)
  public func dfuDelegate(didFail error: ZTCoreKit.ZTError?)
  public func dfuDelegate(progress: Swift.Float?)
  public func dfuDelegate(leftDidFinish newVersion: Swift.String?)
  public func dfuDelegate(rightDidFinish newVersion: Swift.String?)
}
extension ZTGamingKit.ZTRealtimeMessage.Event {
  public enum EventType : Swift.UInt8, ZTCoreKit.ZTEnum {
    case motion
    case transition
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum MotionId : Swift.UInt8, ZTCoreKit.ZTEnum {
    case undefined
    case stepForward
    case stepBackward
    case stepSideLeft
    case stepSideRight
    case stepUp
    case stepDown
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum MotionIntensity : Swift.UInt8, ZTCoreKit.ZTEnum {
    case undefined
    case low
    case medium
    case high
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
extension ZTGamingKit.ZTRealtimeMessage {
  public struct Event : Swift.CustomStringConvertible {
    public var timestamp: Swift.UInt32? {
      get
    }
    public var eventType: ZTGamingKit.ZTRealtimeMessage.Event.EventType? {
      get
    }
    public var motionId: ZTGamingKit.ZTRealtimeMessage.Event.MotionId? {
      get
    }
    public var intensity: ZTGamingKit.ZTRealtimeMessage.Event.MotionIntensity? {
      get
    }
    public var arguments: [Swift.UInt8]? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(data: Foundation.Data)
  }
}
public enum ZTRealtimeMessageEventType : Swift.UInt8, ZTCoreKit.ZTEnum {
  case status
  case acknowledgment
  case realTimeEvent
  case realTimeMetrics
  case warning
  case error
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension ZTGamingKit.ZTGaming {
  public func getMyShoesData(completion: @escaping (([[Swift.String : Any]]?, Swift.Error?) -> Swift.Void))
  public func getMyShoeData(code: Swift.String = "", completion: @escaping (([Swift.String : Any]?, Swift.Error?) -> Swift.Void))
}
public typealias ZTActivityResult = (Swift.String?, ZTCoreKit.ZTError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class ZTGaming {
  public static let version: Swift.String
  public static let shared: ZTGamingKit.ZTGaming
  public var dfuDelegate: ZTGamingKit.ZTGamingDfuDelegate?
  public var connectedDevice: ZTCoreKit.ZTDevice? {
    get
  }
  public var isActivityRunning: Swift.Bool? {
    get
  }
  public var lastSerialNumber: Swift.String? {
    get
  }
  public var currentActivity: ZTGamingKit.ZTGamingActivity? {
    get
  }
  public var currentAlgoMode: ZTCoreKit.ZTAlgoMode? {
    get
  }
  final public let onRealtimeMessageUpdated: ZTCoreKit.ZTSignal<(ZTGamingKit.ZTRealtimeMessage, [Swift.UInt8])>
  final public let onActivityError: ZTCoreKit.ZTSignal<(ZTCoreKit.ZTError?)>
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ZTGamingActivity : ZTCoreKit.ZTActivity {
  override final public func save()
  override public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ZTGamingKit.ZTGaming {
  public func readGeneralState(completion: @escaping ((ZTCoreKit.ZTDeviceActualState?, ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func readGeneralState() async throws -> ZTCoreKit.ZTDeviceActualState?
  #endif
  public func setProductMode(mode: ZTCoreKit.ZTAlgoMode, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func setProductMode(mode: ZTCoreKit.ZTAlgoMode) async throws
  #endif
  public func setPrecisionMode(mode: ZTCoreKit.ZTAlgoPrecisionMode, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func setPrecisionMode(mode: ZTCoreKit.ZTAlgoPrecisionMode) async throws
  #endif
  public func setNumberOfSteps(activityType: ZTCoreKit.ZTActivityType, steps: Swift.UInt8, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func setNumberOfSteps(activityType: ZTCoreKit.ZTActivityType, steps: Swift.UInt8) async throws
  #endif
  public func setStreaming(enable: Swift.Bool, interval: Swift.UInt16, activityType: ZTCoreKit.ZTActivityType, metricsId: Swift.UInt8, completion: @escaping ((ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func setStreaming(enable: Swift.Bool, interval: Swift.UInt16, activityType: ZTCoreKit.ZTActivityType, metricsId: Swift.UInt8) async throws
  #endif
  public func checkMode(completion: @escaping ((ZTCoreKit.ZTAlgoMode?, ZTCoreKit.ZTError?) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  public func checkMode() async throws -> ZTCoreKit.ZTAlgoMode?
  #endif
}
extension ZTGamingKit.ZTRealtimeMessage {
  public struct Metrics : Swift.CustomStringConvertible {
    public var activityType: ZTCoreKit.ZTActivityType? {
      get
    }
    public var metricId: Swift.UInt8? {
      get
    }
    public var value: [Swift.UInt8]? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(data: Foundation.Data)
  }
}
extension ZTGamingKit.ZTRealtimeMessage.Side : Swift.Equatable {}
extension ZTGamingKit.ZTRealtimeMessage.Side : Swift.Hashable {}
extension ZTGamingKit.ZTRealtimeMessage.Side : Swift.RawRepresentable {}
extension ZTGamingKit.ZTUserDataParameters.Parameters : Swift.Equatable {}
extension ZTGamingKit.ZTUserDataParameters.Parameters : Swift.Hashable {}
extension ZTGamingKit.ZTUserDataParameters.Parameters : Swift.RawRepresentable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.EventType : Swift.Equatable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.EventType : Swift.Hashable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.EventType : Swift.RawRepresentable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionId : Swift.Equatable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionId : Swift.Hashable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionId : Swift.RawRepresentable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionIntensity : Swift.Equatable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionIntensity : Swift.Hashable {}
extension ZTGamingKit.ZTRealtimeMessage.Event.MotionIntensity : Swift.RawRepresentable {}
extension ZTGamingKit.ZTRealtimeMessageEventType : Swift.Equatable {}
extension ZTGamingKit.ZTRealtimeMessageEventType : Swift.Hashable {}
extension ZTGamingKit.ZTRealtimeMessageEventType : Swift.RawRepresentable {}
